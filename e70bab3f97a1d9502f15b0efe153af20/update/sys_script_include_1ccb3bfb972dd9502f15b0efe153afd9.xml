<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>global.nfProcessFlowFormatterCore</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>nfProcessFlowFormatterCore</name>
        <script><![CDATA[var nfProcessFlowFormatterCore = Class.create();
nfProcessFlowFormatterCore.prototype = {
	initialize: function( currentGR ) {
		this.recordGR = currentGR;
		
		this.initializePartTwo();
		
		this.choices = this.getStages();
	},
	initializePartTwo: function() {
		
	},
	getStagesToKeep: function() {
		//Use "this.recordGR" to access the record being passed in
		//Return an array of values corresponding to the 
		//    "name" of the stage in from sys_process_flow
		//Return a null value to keep all stages
		
		return null;
	},
	getStagesToRemove: function() {
		//Use "this.recordGR" to access the record being passed in
		//Return an array of values corresponding to the 
		//    "name" of the stage in from sys_process_flow
		var removeStages = [];
		
		return removeStages;
	},
	getVisitedStages: function() {
		//Use "this.recordGR" to access the record being passed in
		//Return an array of values corresponding to the 
		//    "name" of the stage in from sys_process_flow
		//Return a null value to have all "past" stages marked as visited
		
		return null;
	},
	type: 'nfProcessFlowFormatterCore'
};

nfProcessFlowFormatterCore.prototype.getStages = function() {
	var keep = this.getStagesToKeep();
	var remove = this.getStagesToRemove();
	var visited = this.getVisitedStages();

	var choices = null;

	var currentStateOrder = 999999;
	var tableName = this.recordGR.getTableName();

	var flowGR = new GlideRecord('sys_process_flow');
	flowGR.addEncodedQuery('table=' + tableName + '^active=true');
	flowGR.orderBy('order');
	flowGR.query();

	while(flowGR.next()) {
		if (!choices) {
			choices = new GlideChoiceList();
		}
		var stageName = flowGR.getDisplayValue("name");
		var flowGROrder = parseInt(flowGR.order);
		
		if ( (keep && keep.indexOf(stageName) == -1) || 
			(remove && remove.indexOf(stageName)!= -1)) {
			continue;
		}

		var choice = new GlideChoice(stageName, flowGR.getDisplayValue("label"));
		var match  = GlideFilter.checkRecord(this.recordGR, flowGR.condition);
		
		if (match){
			currentStateOrder = flowGROrder;
			choice.setParameter('state', 'current');
		} else {
			choice.setParameter('state', 'future');
		
			if ( (visited  && (visited.indexOf(stageName) != -1)) ||
				 (!visited && (currentStateOrder > flowGROrder) ) )
					choice.setParameter('state', 'past');
		}

		choices.add( choice );
	}
	return choices;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>nick.fajardo@icf</sys_created_by>
        <sys_created_on>2022-09-02 15:26:07</sys_created_on>
        <sys_id>1ccb3bfb972dd9502f15b0efe153afd9</sys_id>
        <sys_name>nfProcessFlowFormatterCore</sys_name>
        <sys_package display_value="nfDynamicProcessFlow" source="e70bab3f97a1d9502f15b0efe153af20">e70bab3f97a1d9502f15b0efe153af20</sys_package>
        <sys_policy/>
        <sys_scope display_value="nfDynamicProcessFlow">e70bab3f97a1d9502f15b0efe153af20</sys_scope>
        <sys_update_name>sys_script_include_1ccb3bfb972dd9502f15b0efe153afd9</sys_update_name>
    </sys_script_include>
</record_update>
